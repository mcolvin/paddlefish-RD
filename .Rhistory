#######################################################################
#
#  LOAD SCRIPTS
#
#######################################################################
library(RODBC)
source("_R/1_global.R")
source("_R/2_functions.R")
run<-FALSE # SET TO TRUE TO REQUERY NOXUBEE GAGE DATA
source("_R/3_load-and-clean.R") #needs internet to pull gage data
source("_R/4_tables.R")
source("_R/5_figures.R")
source("_R/6_models.R")
library(R2jags)
load("_output/ipmdat.Rdata")
## MODEL 03: INTEGRATED POPULATION MODEL FORMULATION
mod<-function()
    {
    pcap[1]<- 1-exp(sum(log_p0[1,1:noccs[1]])) #PROBABILIYT OF CAPTURE
    ncap[1]~dbin(pcap[1],N_lat[1])      
    for(iii in 1:3)
        {
        a[iii]~dnorm(0, 0.0001)
        b[iii]~dnorm(0,0.37)
        }
    for(i in 2:D)
        {
        N_lat[i]~dpois(mu1[i]);T(0,160)## MAKE SURE THIS IS LARGER THAN THE PRIOR!
        mu1[i]<-N_lat[i-1]+(r[i]+ pl[i]*N_lat[i-1])
        r[i]<- exp(a[1]+a[2]*X[i,2]+a[3]*X[i,3]) #c(-6,0.02,-0.04)
        logit(pl[i])<- b[1]+b[2]*X[i,2]+b[3]*X[i,3]
        }
    N[1]<- sum(Z[,1])   
    for(ii in 2:nprim)
        {
        N[ii]<- sum(Z[,ii])  ## fixme ## below
        pcap[ii]<- 1-exp(sum(log_p0[ii,1:noccs[ii]])) #PROBABILIYT OF CAPTURE
        ncap[ii]~dbin(pcap[ii],N_lat[tt[ii]])        
        }    
    # ESTIMATE ABUNDANCE FROM CMR
    for(i in 1:M)
        {
        for(j in 1:nprim)
            {
            ip[i,j]<- omega[j]*(1-Z_known[i,j])+Z_known[i,j]# INCLUSION PROBABILITY OMEGA OR 1, 1 = ACOUSTIC
            Z[i,j]~dbern(ip[i,j])            
            }
        for(k in 1:nocc)
            {
            ch[i,k]~dbern(Z[i,secid[k]]*p[secid[k],occId[k]])
            }
        }    
    # PRIORS
    for(i in 1:nprim)
        {
        omega[i]~dunif(0,1)
        for(j in 1:12)
            {
            p[i,j]~dunif(0,1)
            p0[i,j]<- 1-p[i,j]
            log_p0[i,j]<- log(p0[i,j])
            }
        }
    N1~dunif(10,155)
    N_lat[1]<-round(N1)
    }
library(R2jags)
noccs<-table(ipmdat$secid)
occId<-unlist(sapply(noccs,function(x) 1:x))
dat<- list(
    ch=ipmdat$ch,
    nocc=length(ipmdat$secid),
    noccs=table(ipmdat$secid),
    occId=occId,
    secid=ipmdat$secid,
    tt=ipmdat$tt,
    D=ipmdat$D,
    nprim=ipmdat$nprim,
    M=ipmdat$M,
    Z_known=ipmdat$Z_known,
    ncap=ipmdat$ncap,
    X=ipmdat$X)
ini<-list()
Z<-matrix(1,dat$M,dat$nprim)
inits<- function()
{
list(omega=apply(Z,2,mean),
        p1=0.1,Z=Z,N1=100,
        b=c(-6,0.02,-0.04),
        a=c(-10,1.3,-1.04))
}
params<-c("N","N_lat","p")#"pcap","p1","N1","a","b")
ptm<- proc.time()
out<-NULL
out <- jags.parallel(data=dat,
inits=inits,
parameters=params,
model.file=mod,
n.chains = 3,
n.iter = 100,
n.burnin = 65, 
n.thin=1,
    export_obj_names=c("Z","D"),
working.directory=getwd())
tot<-proc.time()-ptm
print(paste0(round(tot[3]/60,1)," minutes")) 
#save(out,file="_output/ests.Rdata")
out
out
q()
